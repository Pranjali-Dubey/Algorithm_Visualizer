import React from 'react';
import { useNavigate } from 'react-router-dom';
import './GenerateBinaryNumbers.css';  // External CSS for styling

const GenerateBinaryNumbersInQueue = () => {
  const navigate = useNavigate();

  // Function to navigate to the Generate Binary Numbers quiz page
  const goToQuiz = () => {
    navigate('/Generate-Binary-Numbers-quiz');
  };

  return (
    <div className="generate-binary-numbers-page">
      {/* Container for Heading and Information */}
      <div className="info-container">
        <h1 className="page-title">Generate Binary Numbers Using Queue</h1>

        {/* Text Section with Bullet Points */}
        <div className="text-section">
          <h2>What is Binary Number Generation in Queue?</h2>
          <ul>
            <li>Binary numbers are the numbers that consist only of 0s and 1s. They are the foundation of computer number systems.</li>
            <li>The problem of generating binary numbers involves using a queue data structure to generate binary numbers in increasing order, starting from 1.</li>
            <li>For example, the first few binary numbers are: 1, 10, 11, 100, 101, 110, 111, 1000, etc.</li>
          </ul>
          <h2>How Queue is Used:</h2>
          <ul>
            <li>A queue is used to store intermediate binary numbers in the process of generation.</li>
            <li>Binary numbers are generated by adding '0' or '1' to the numbers at the front of the queue.</li>
            <li>This queue-based approach ensures the binary numbers are generated in a breadth-first manner.</li>
          </ul>
        </div>
      </div>

      {/* Additional Information Section */}
      <div className="additional-info">
        <h2>Time Complexity:</h2>
        <ul>
          <li>Best Case: O(1) — In the simplest case, only a single binary number is generated.</li>
          <li>Average Case: O(n) — The algorithm generates each binary number once, so the time complexity is proportional to the number of binary numbers generated.</li>
          <li>Worst Case: O(n) — The queue operations (enqueue and dequeue) are constant time, and we process each binary number once.</li>
        </ul>
        <h2>Space Complexity:</h2>
        <ul>
          <li>O(n) — Space complexity is determined by the size of the queue, which stores all generated numbers.</li>
        </ul>
      </div>

      {/* Pseudocode Section */}
      <div className="additional-info">
        <h2>Binary Number Generation in Queue Pseudocode:</h2>
        <pre>
{`function generateBinaryNumbers(n):
    queue = empty queue
    enqueue "1" into queue
    for i from 1 to n:
        current = dequeue from queue
        print current
        enqueue current + "0" into queue
        enqueue current + "1" into queue`}
        </pre>
      </div>

      {/* Example Section */}
      <div className="additional-info">
        <h2>Example:</h2>
        <p>
          Given the input n = 5, the first 5 binary numbers generated would be:<br />
          <strong>Binary Numbers:</strong> 1, 10, 11, 100, 101
        </p>
        <ul>
          <li>Step 1: Start with the initial binary number "1". Enqueue it.</li>
          <li>Step 2: Dequeue "1", print it, and then enqueue "10" and "11".</li>
          <li>Step 3: Dequeue "10", print it, and then enqueue "100" and "101".</li>
          <li>Step 4: Dequeue "11", print it, and then enqueue "110" and "111".</li>
          <li>Step 5: Continue this process until 5 binary numbers are generated.</li>
        </ul>
        <strong>Result: The first 5 binary numbers are: 1, 10, 11, 100, 101</strong>
      </div>

      {/* Quiz Button */}
      <div className="quiz-button-container">
        <button className="btn-primary" onClick={goToQuiz}>Go to Binary Numbers Quiz</button>
      </div>
    </div>
  );
};

export default GenerateBinaryNumbersInQueue;
